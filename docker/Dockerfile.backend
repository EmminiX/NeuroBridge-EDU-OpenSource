# NeuroBridge EDU Backend Dockerfile
# Multi-stage build for security and optimization

# Build stage
FROM python:3.11-slim AS builder

# Install system dependencies for building Python packages and Whisper models
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    ffmpeg \
    libsndfile1 \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY python_backend/requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Pre-download Whisper models during build for better startup performance
# This reduces first-run latency by having models ready
RUN python -c "\
import os; \
os.environ['HF_HUB_DISABLE_PROGRESS_BARS'] = '1'; \
os.environ['HF_HUB_DISABLE_TELEMETRY'] = '1'; \
from faster_whisper import WhisperModel; \
print('Downloading Whisper base model...'); \
WhisperModel('base', download_root='/tmp/whisper_models'); \
print('Whisper base model downloaded successfully')"

# Production stage  
FROM python:3.11-slim AS production

# Install runtime dependencies for Whisper and audio processing
RUN apt-get update && apt-get install -y \
    curl \
    ffmpeg \
    libsndfile1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -g 1001 neurobridge && \
    useradd -r -u 1001 -g neurobridge neurobridge

# Copy virtual environment and Whisper models from builder stage
COPY --from=builder /opt/venv /opt/venv
COPY --from=builder /tmp/whisper_models /app/.cache/whisper
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Create data and model cache directories with proper permissions
RUN mkdir -p /app/data /app/.cache && chown -R neurobridge:neurobridge /app/data /app/.cache

# Copy application code
COPY python_backend/ ./
RUN chown -R neurobridge:neurobridge /app

# Switch to non-root user
USER neurobridge

# Expose port
EXPOSE 3939

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3939/health || exit 1

# Environment variables
ENV HOST=0.0.0.0 \
    PORT=3939 \
    LOG_LEVEL=INFO \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    HF_HUB_CACHE=/app/.cache/huggingface \
    TRANSFORMERS_CACHE=/app/.cache/transformers \
    WHISPER_CACHE=/app/.cache/whisper \
    LOCAL_WHISPER_ENABLED=true \
    LOCAL_WHISPER_MODEL_SIZE=base \
    CUDA_VISIBLE_DEVICES=-1

# Start application
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3939"]